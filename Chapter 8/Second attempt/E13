#include "std_lib_facilities.h"

/*
Improve print_until_s() from ยง8.5.2. Test it. What makes a good set of
test cases? Give reasons. Then, write a print_until_ss() that prints until it
sees a second occurrence of its quit argument. 
*/

// print up until the first quit is seen
void print_until_s(const vector<string> v, const string quit)
{
	cout << "Print until the first " << quit << "\n\n";

	if (v.size() < 1) {
		error("The vector is empty.");
	}

	for (int i = 0; i < v.size(); ++i) {
		if (v[i] == quit) {
			return;
		}

		if (v[i] == "") {
			error("print_until_s(): empty string.");
		}

		cout << v[i] << endl;
	}
}

// print up until the second quit is seen
void print_until_ss(const vector<string> v, const string quit)
{
	cout << "\nPrint until the second " << quit << "\n\n";
	
	int counter = 0; // to give an indicator when the second quit found 

	if (v.size() < 1) {
		error("The vector is empty.");
	}

	for (int i = 0; i < v.size(); ++i) {
		if (v[i] == quit) {
			++counter;
		}

		if (counter == 2) {
				return;
		}
		
		if (v[i] == "") {
			error("print_until_s(): empty string.");
		}

		cout << v[i] << endl;
	}
}

int main()
{
	try {
		vector<string> v = { "big", "boy", "come", "and" , "see", "me" , "and", "lick", "me" };
		string s = "and";

		print_until_s(v, s);
		print_until_ss(v, s);

		return 0;
	}
	// e.what() extracts message from the runtime_error
	catch (runtime_error& e) {
		cerr << "\nruntime error: " << e.what() << "\n"; // cerr used for error outputs
		return 1;
	}
	// used to handle excpetions of any type whatsoever
	catch (...) {
		cerr << "\nSomething went wrong\n";
		return 2;
	}
}
