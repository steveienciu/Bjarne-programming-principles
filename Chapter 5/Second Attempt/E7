#include <iostream>
#include <math.h>

using namespace std;

// program to find the roots of a quadratic equation

// function to throw input error
void error(string s) {
	throw runtime_error(s);
}

// fucntion to print out the roots 
void roots(double a, double b, double c) {

	// pre condition: a is greater than zero
	if (a == 0) {
		error("A number divided by zero is undefined. Input an 'a' greater than zero.\n\n");
	}

	// value of the discriminant
	double d = pow(b, 2) - 4 * a * c;

	// post-condition: the discriminant is greater than or equal to zero
	if (d < 0) {
		error("The discriminant is a negative number. Therefore, there are no real roots.\n\n");
	}

	// values of the two roots 
	double x1 = (-b + sqrt(d)) / (2 * a);
	double x2 = (-b - sqrt(d)) / (2 * a);

	// logic for the output 
	if (b < 0 && c < 0) {
		cout << "\n\nThe two roots for the quadratic equation " << a << "x^2 + (" << b << "x) + (" << c << ") are " << x1 << " and " << x2 << endl;
	}
	else if (b < 0) {
		cout << "\n\nThe two roots for the quadratic equation " << a << "x^2 + (" << b << "x) + " << c << " are " << x1 << " and " << x2 << endl;
	}
	else if (c < 0) {
		cout << "\n\nThe two roots for the quadratic equation " << a << "x^2 + " << b << "x + (" << c << ") are " << x1 << " and " << x2 << endl;
	}
	else {
		cout << "\n\nThe two roots for the quadratic equation " << a << "x^2 + " << b << "x + " << c << " are " << x1 << " and " << x2 << endl;
	}

	// logic for checking if the roots are correct
	double a1 = 1;
	double b1 = -x1 + (-x2);
	double c1 = (-x1) * (-x2);

	cout << "\nThe quadratic equation from the obtained roots is " << a * a1 << "x^2 + " << a * b1 << "x + " << a * c1 << endl;
	cout << "Therefore the roots obtained are correct.\n";
}

int main() {
	try {
		double a = 0, b = 0, c = 0;

		cout << "The quadratic equation takes the form of ax^2 + bx + c = 0. Please input a value for 'a', 'b', and 'c' to find its roots.\n\n";
		cin >> a >> b >> c;

		roots(a, b, c);

		return 0;
	}
	// e.what() extracts message from the runtime_error
	catch (runtime_error& e) {
		cerr << "\nruntime error: " << e.what() << "\n"; // cerr used for error outputs 
		return 1;
	}
	// used to handle excpetions of any type whatsoever
	catch (...) {
		cerr << "\nSomething went wrong\n";
		return 2;
	}
}
